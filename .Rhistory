library(cluster) #Para calcular la silueta
#install.packages("e1071")
library(e1071)#para cmeans
#install.packages("mclust")
library(mclust) #mixtures of gaussians
#install.packages("fpc")
library(fpc) #para hacer el plotcluster
#install.packages("NbClust")
library(NbClust) #Para determinar el número de clusters óptimo
#install.packages("factoextra")
library(factoextra) #Para hacer gráficos bonitos de clustering
#install.packages("ape")
library(ape)
# Set del directorio donde estan los datos
# Andrea
setwd("C:/User/\user/Documents/2019/UVG/Segundo Semestre/DataScience/Laboratorios/Laboratorio1/Laboratorio1DataScience")
# Set del directorio donde estan los datos
# Andrea
setwd("C:/User/user/Documents/2019/UVG/Segundo Semestre/DataScience/Laboratorios/Laboratorio1/Laboratorio1DataScience")
setwd("~/2019/UVG/Segundo Semestre/DataScience/Laboratorios/Laboratorio3/DSLaboratorio3")
# --------------------
# Lectura de los datos
# --------------------
datos <- read.csv("datosImp.csv")
# Frecuencia
str(datos)
datos_super<-ts(datos$GasSuperior, start = c(2001,1), frequency = 12)
print(datos_super)
autoplot(datos_super, ts.colour = "blue", ts.linetype = "dashed", xlab = "Time", ylab = "Diesel",
title = "Superior Gas behavior")
library(forecast)
library(tseries)
library(ggfortify)
library(fUnitRoots)
library(lmtest)
library(FitAR)
install.packages("forecast")
library(forecast)
install.packages("tseries")
library(tseries)
install.packages("ggfortify")
install.packages("forecast")
autoplot(datos_super, ts.colour = "blue", ts.linetype = "dashed", xlab = "Time", ylab = "Diesel",
title = "Superior Gas behavior")
autoplot?
dfsf
library(ggplot2)
autoplot(datos_super, ts.colour = "blue", ts.linetype = "dashed", xlab = "Time", ylab = "Diesel",
title = "Superior Gas behavior")
datos_regular<-ts(datos$GasRegular, start = c(2001,1), frequency = 12)
print(datos_regular)
#Trazamos la serie de tiempo datos_diesel
autoplot(datos_regular, ts.colour = "blue", ts.linetype = "dashed", xlab = "Time", ylab = "Diesel",
title = "Regular Gas behavior")
# Se traza la serie de tiempo para la gasolina superior
autoplot(table(datos_super), ts.colour = "blue", ts.linetype = "dashed", xlab = "Time", ylab = "Diesel",
title = "Superior Gas behavior")
# Se traza la serie de tiempo para la gasolina superior
plot(datos_super, ts.colour = "blue", ts.linetype = "dashed", xlab = "Time", ylab = "Diesel",
title = "Superior Gas behavior")
plot(decompose(datos_regular))
autoplot(stl(datos_regular, s.window = "periodic"), ts.colour = "blue")
# Autocorrelación
acf(datos_regular)
plot(stl(datos_regular, s.window = "periodic"), ts.colour = "blue")
# Autocorrelación
acf(datos_regular)
# Varianza
autoplot(acf(datos_regular, plot = FALSE))
# Varianza
plot(acf(datos_regular, plot = FALSE))
# Pruebas
adf.test(diff(log(datos_diesel)), alternative="stationary", k=0)
pp.test(diff(log(datos_diesel), alternative="stationary"))
#install.packages("forecast")
library(forecast)
#install.packages("tseries")
library(tseries)
#install.packages("ggfortify")
library(ggfortify)
#install.packages("fUnitRoots")
library(fUnitRoots)
#install.packages("lmtest")
library(lmtest)
#install.packages("FitAR")
library(FitAR)
library(ggplot2)
install.packages("FitAR")
library(FitAR)
# Pruebas
adf.test(diff(log(datos_diesel)), alternative="stationary", k=0)
# Varianza
autoplot(acf(datos_super, plot = FALSE))
# Autocorrelación
acf(datos_super)
# Pruebas
adf.test(diff(log(datos_super)), alternative="stationary", k=0)
pp.test(diff(log(datos_super), alternative="stationary"))
# Gráfico nuevo
plot(decompose(diff(log(datos_super))))
# Modelo arima
ndiffs(datos_super)
nsdiffs(datos_super)
fitARIMAreg <- arima(datos_super, order=c(1,1,1),seasonal = list(order = c(1,0,0), period = 12),method="ML")
coeftest(fitARIMAreg)
confint(fitARIMAreg)
fitARIMAsup <- arima(datos_super, order=c(1,1,1),seasonal = list(order = c(1,0,0), period = 12),method="ML")
coeftest(fitARIMAsup)
confint(fitARIMAsup)
acf(datos_super$residuals,lag.max=140)
acf(fitARIMAsup$residuals,lag.max=140)
boxresult=LjungBoxTest (fitARIMAsup$residuals,k=2,StartLag=1)
plot(boxresult[,3],main= "Ljung-Box Q Test", ylab= "P-values", xlab= "Lag")
qqnorm(fitARIMAsup$residuals)
qqline(fitARIMAsup$residuals)
auto.arima(datos_super, trace=TRUE)
futurValdlSup <- forecast(fitARIMAsup,h=10, level=c(99.5))
plot(futurValdlSup)
